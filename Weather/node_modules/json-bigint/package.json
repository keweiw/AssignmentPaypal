{
  "name": "json-bigint",
  "version": "0.0.2",
  "description": "JSON.parse with bigints support",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:sidorares/json-bigint.git"
  },
  "keywords": [
    "JSON",
    "bigint",
    "bignumber",
    "parse",
    "json"
  ],
  "author": {
    "name": "Andrey Sidorov",
    "email": "sidorares@yandex.ru"
  },
  "license": "MIT",
  "dependencies": {
    "bignumber.js": "~1.1.1"
  },
  "readme": "json-bigint\n===========\n\nJSON.parse/stringify with bigints support. Based on Douglas Crockford [JSON.js](https://github.com/douglascrockford/JSON-js) package and [bignumber.js](https://github.com/MikeMcl/bignumber.js) library.\n\nWhile most JSON parsers assume numeric values have same precision restrictions as IEEE 754 double, JSON specification _does not_ say anything about number precision. Any floating point number in decimal (optionally scientific) notation is valid JSON value. It's a good idea to serialize values which might fall out of IEEE 754 integer precision as strings in your JSON api, but `{ \"value\" : 9223372036854775807}`, for example, is still a valid RFC4627 JSON string, and in most JS runtimes the result of `JSON.parse` is this object: `{ value: 9223372036854776000 }`\n\n==========\n\nexample:\n\n```js\nvar JSONbig = require('json-bigint');\n\nvar json = '{ \"value\" : 9223372036854775807, \"v2\": 123 }';\nconsole.log('Input:', json);\nconsole.log('');\n\nconsole.log('node.js bult-in JSON:')\nvar r = JSON.parse(json);\nconsole.log('JSON.parse(input).value : ', r.value.toString());\nconsole.log('JSON.stringify(JSON.parse(input)):', JSON.stringify(r));\n\nconsole.log('\\n\\nbig number JSON:');\nvar r1 = JSONbig.parse(json);\nconsole.log('JSON.parse(input).value : ', r1.value.toString());\nconsole.log('JSON.stringify(JSON.parse(input)):', JSONbig.stringify(r1));\n```\n\nOutput:\n\n```\nInput: { \"value\" : 9223372036854775807, \"v2\": 123 }\n\nnode.js bult-in JSON:\nJSON.parse(input).value :  9223372036854776000\nJSON.stringify(JSON.parse(input)): {\"value\":9223372036854776000,\"v2\":123}\n\n\nbig number JSON:\nJSON.parse(input).value :  9223372036854775807\nJSON.stringify(JSON.parse(input)): {\"value\":9223372036854775807,\"v2\":123}\n```\n\n### Links:\n- [RFC4627: The application/json Media Type for JavaScript Object Notation (JSON)](http://www.ietf.org/rfc/rfc4627.txt)\n- [Re: \\[Json\\] Limitations on number size?](http://www.ietf.org/mail-archive/web/json/current/msg00297.html)\n- [Is there any proper way to parse JSON with large numbers? (long, bigint, int64)](http://stackoverflow.com/questions/18755125/node-js-is-there-any-proper-way-to-parse-json-with-large-numbers-long-bigint)\n- [What is JavaScript's Max Int? What's the highest Integer value a Number can go to without losing precision?](http://stackoverflow.com/questions/307179/what-is-javascripts-max-int-whats-the-highest-integer-value-a-number-can-go-t)\n- [Large numbers erroneously rounded in Javascript](http://stackoverflow.com/questions/1379934/large-numbers-erroneously-rounded-in-javascript)\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/sidorares/json-bigint/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/sidorares/json-bigint/issues"
  },
  "homepage": "https://github.com/sidorares/json-bigint",
  "_id": "json-bigint@0.0.2",
  "_shasum": "b83708e7d8ebfd7c084abd3a9f97e3444c265462",
  "_from": "json-bigint@*",
  "_resolved": "https://registry.npmjs.org/json-bigint/-/json-bigint-0.0.2.tgz"
}
